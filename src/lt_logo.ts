#!/usr/bin/env -S deno run -A --watch
/** # LasorTech Logo
  * This module contains the LasorTech Logo which is a Graphics Class, it has three main roles:
  * - Render the Static Square Logo
  * - Animating the Loading version
  * - Animate to Titlecard
  * @module
  */
import { Graphics } from './graphics.ts';

/** LasorTech Multi-Logo (Static Square, Loading, Titlecard) */
export const logo = new Graphics({
    debug: import.meta.main,
    width: 650, height:85,
    matrix: [8.25, 2, 0, -8.25, 0, 0],
    effects: {
        'shadow': [ // White top and Black bottom shadow
            {'':'morphology', in:'SourceAlpha', operator:'dilate', radius:2, result:'extended'},
            // White Shadow
            {'':'flood', 'flood-color':'#fff', result:'shw0'},
            {'':'offset', in:'extended', dx:1, dy:1, result:'shw1'},
            {'':'composite', operator:'out', in:'shw0', in2:'shw1'},
            {'':'morphology', operator:'dilate', radius:1},
            {'':'gaussianblur', stdDeviation:1, result:'shw2'},
            // Black Shadow
            {'':'flood', 'flood-color':'#000', result:'shb0'},
            {'':'offset', in:'extended', dx:-3, dy:-2, result:'shb1'},
            {'':'composite', operator:'out', in:'shb0', in2:'shb1'},
            {'':'morphology', operator:'dilate', radius:1},
            {'':'gaussianblur', stdDeviation:1, result:'shb2'},
            // Both
            {'':'merge', ins:['shw2','shb2']},
            {'':'composite', operator:'atop', in2:'SourceGraphic'}
        ],
        'silver': [ // Silver Texture
            {'':'gradient', transform:'rotate(135) translate(-0.45 0)',stops:[
                '#000','#545454','#fff','#fff','#545454','#000'
            ]}
        ],
        'mask': [ // Mask to subtract logo from circle
            {'':'morphology', operator:'dilate', radius:5},
            {'':'mask', type:'exclude', from:'logo'},
        ]
    },
    animations: {
        default: 0,
        loading: {start: -12, end:0, time:1},
        title: {start: 0, end:36, repeat:1},
        test: {start:12, end:36, repeat:1}
    },
    shape: u => {
        /** Circle Details */
        const C = {r:5, v:0.5, c:0, e:u(0,30)/1.2, w:-u(0,30)/1.2};
        C.c = C.v*C.r;
        /** Shapes */
        const S:{[letter:string]:number[][]} = {
            L: [
                // BL
                [3-u(-12,-4),-3],
                // TL
                [3-u(-12,-4),-1+u(-4,0)],
                // TR
                [3-1.5*u(-8,-4),-1+u(-4,0)],
                // ML
                [3-1.5*u(-8,-4),-1],
                [3-u(-4,-2),-1],
                // TO INNER TOP RIGHT
                [3-u(-4,-2),1-u(-6,-4)],
                // TO BOTTOM OF TOP
                [-1-u(-4,-2)+u(-12,-8),1-u(-6,-4)],
                [-1-u(-4,-2)+u(-12,-8),3-u(-8,-4)],
                [5-u(-4,0),3-u(-8,-4)],
                // MR
                [5-u(-4,0),-1],
                // BR
                [5-u(-4,0),-3],
                [],
            ],
            A: [
                [2,-3],
                [2,-3+u(2,8)],
                [2+u(0,2)+u(8,12),-3+u(2,8)],
                [2+u(0,2)+u(8,12),-3+u(4,8)-u(12,16)],
                [2+u(0,2)+u(10,12),-3+u(4,8)-u(12,16)],
                [2+u(0,2)+u(10,12),-3+u(4,8)-u(13,16)],
                [2+u(0,2)+u(10,12)-u(16,18),-3+u(4,8)-u(13,16)],
                [2+u(0,2)+u(10,12)-u(16,18),-3+u(4,8)-u(15,16)],
                [2+u(0,2)+u(10,12),-3+u(4,8)-u(15,16)],
                [2+u(0,2)+u(10,12),-3+u(4,8)],
                [2+u(0,2),-3+u(4,8)],
                [2+u(0,2),-3],
                [],
            ],
            S: [
                [9,3-u(10,12)-0.8*u(18,20)], //  [9,-0.6],
                [9,3],              //  [9,3],
                [9+u(12,18),3],     //  [15,3],
                [9+u(12,18),3-u(10,12)],     //  [15,1],
                [9+u(12,14),3-u(10,12)],     //  [11,1],
                [9+u(12,14),3-u(10,12)-0.2*u(18,20)],    // [11,0.6],
                [9+u(12,14)+u(20,24),3-u(10,12)-0.2*u(18,20)],    // [15,0.6],
                [9+u(12,14)+u(20,24),3-u(10,12)-0.8*u(18,20)-1.2*u(24,26)],    // [15,-3],
                [9+u(12,14)+u(20,22)-u(26,30),3-u(10,12)-0.8*u(18,20)-1.2*u(24,26)], // [9,-3],
                [9+u(12,14)+u(20,22)-u(26,30),3-u(10,12)-0.8*u(18,20)-0.4*u(24,26)], /*[9,-1],*/
                [9+u(12,14)+u(20,22),3-u(10,12)-0.8*u(18,20)-0.4*u(24,26)], //[13,-1],
                [9+u(12,14)+u(20,22),3-u(10,12)-0.8*u(18,20)], // [13,-0.6],
                [],
            ],
            O: [
                [16,3-u(16,18)],
                [16,3],
                [16+u(18,24),3],//[22,3],
                [16+u(18,24),3-u(16,18)-u(24,28)],//[22,-3],
                [16+u(18,22),3-u(16,18)-u(24,28)], // [20,-3],
                [16+u(18,22),3-u(16,18)], // [20, 1],
                [16+u(18,20),3-u(16,18)],// [18,1],
                [16+u(18,20),3-u(16,18)-u(24,26)],// [18,-1],
                [16+u(18,20)+u(28,30),3-u(16,18)-u(24,26)], // [20,-1],
                [16+u(18,20)+u(28,30),3-u(16,18)-u(24,28)], //[20,-3],
                [16,3-u(16,18)-u(24,28)],//
                [],
            ],
            R: [
                [23,3-u(22,24)-u(30,34)], // [23,-3],
                [23,3],
                [23+u(24,30),3], // [29,3],
                [23+u(24,30),3-u(22,24)-0.8*u(30,32)], // [29,-0.6],
                [23+u(24,28),3-u(22,24)-0.8*u(30,32)], // [27,-0.6],
                [23+u(24,28)+u(34,36),3-u(22,24)-0.8*u(30,32)-1.2*u(34,36)],  // [29,-3],
                [23+u(24,28)-u(32,34)+u(34,36),3-u(22,24)-0.8*u(30,32)-1.2*u(34,36)], // [27,-3],
                [23+u(24,28)-u(32,34),3-u(22,24)-0.8*u(30,32)], // [25,-0.6],
                [23+u(24,28)-u(32,34),3-u(22,24)-0.2*u(30,32)], // [25,0.6],
                [23+u(24,28),3-u(22,24)-0.2*u(30,32)], // [27,0.6],
                [23+u(24,28),3-u(22,24)], // [27,1],
                [23+u(24,26),3-u(22,24)], // [25,1],
                [23+u(24,26),3-u(22,24)-u(30,34)], // [25,-3],
                [],
            ],
            T: [
                [5.5,3-u(0,2)], // [5.5,1],
                [5.5,3], // [5.5,3],
                [5.5+0.875*u(2,6),3], // [9,3],
                [5.5+0.875*u(2,6),3-u(0,2)], // [9,1],
                [], // 0.875
            ],
            E: [
                [10,3],
                [10,3-u(4,6)-u(12,16)], // [10,-3],
                [10+u(6,8)+u(20,24),3-u(4,6)-u(12,16)], // [16,-3],
                [10+u(6,8)+u(20,24),3-u(4,6)-u(12,14)], // [16,-1],
                [10+u(6,8),3-u(4,6)-u(12,14)], // [12,-1],
                [10+u(6,8),3-u(4,6)-0.8*u(12,14)], // [12,-0.6],
                [10+u(6,8)+u(16,20),3-u(4,6)-0.8*u(12,14)], // [16,-0.6],
                [10+u(6,8)+u(16,20),3-u(4,6)-0.2*u(12,14)], // [16,0.6],
                [10+u(6,8),3-u(4,6)-0.2*u(12,14)], // [12,0.6],
                [10+u(6,8),3-u(4,6)], // [12,1],
                [10+u(6,12),3-u(4,6)], // [16,1],
                [10+u(6,12),3],
                [],
            ],
            C: [
                [17,3],
                [17+u(12,18),3], // [23,3],
                [17+u(12,18),3-u(10,12)],// [23,1],
                [17+u(12,14),3-u(10,12)],// [19,1],
                [17+u(12,14),3-u(10,12)-u(18,20)],// [19,-1],
                [17+u(12,14)+u(22,26),3-u(10,12)-u(18,20)],// [23,-1],
                [17+u(12,14)+u(22,26),3-u(10,12)-u(18,22)],// [23,-3],
                [17,3-u(10,12)-u(18,22)], // [17,-3],
                [],
            ],
            H: [
                [24,3],
                [24+u(18,20),3], // 26, 3
                [24+u(18,20),3-u(16,18)-0.1*u(20,24)], // 26, 0.6 
                [24+u(18,20)+u(24,28)/2,3-u(16,18)-0.1*u(20,24)], // 28, 0.6 
                [24+u(18,20)+u(24,28)/2,3-u(16,18)-0.1*u(20,24)+1.2*u(28,30)], // 28, 3
                [24+u(18,20)+u(24,28),3-u(16,18)-0.1*u(20,24)+1.2*u(28,30)], // 30, 3
                [24+u(18,20)+u(24,28),3-u(16,18)-0.4*u(20,24)-1.2*u(28,30)], // 30, -0
                [24+u(18,20)+u(24,28)/2,3-u(16,18)-0.4*u(20,24)-1.2*u(28,30)], // 28, -3
                [24+u(18,20)+u(24,28)/2,3-u(16,18)-0.4*u(20,24)], // 28, -0.6
                [24+u(18,20),3-u(16,18)-0.4*u(20,24)], // 26, -0.6 
                [24+u(18,20),3-u(16,18)-u(20,24)], // 26, -3
                [24,3-u(16,18)-u(20,24)], // 24, -3
                []
            ]
        };
        return [
            /** Back Circle */
            { effect:['silver','mask','shadow'], path:[
                // Right side
                [C.e,C.r],
                [C.e+C.c,C.r,C.e+C.r,C.c,C.e+C.r,0],
                [C.e+C.r,-C.c,C.e+C.c,-C.r,C.e,-C.r],
                [C.e,-C.r],
                // Left side
                [C.w,-C.r],
                [C.w-C.c,-C.r,C.w-C.r,-C.c,C.w-C.r,0],
                [C.w-C.r,C.c,C.w-C.c,C.r,C.w,C.r],
                [C.w,C.r],
                []
            ]},
            { id:'logo', fill:'#FE0000', effect:['shadow'], debug:false, path:[
                ...'LASOR'.split('').map(c=>S[c].map(x=>x.length?[x[0]-u(0,30)/1.2,-x[1]]:[])).flat(),
                ...S.L.map(x=>x.length?[-x[0]+u(0,30)/5, x[1]]:[]),
                ...'TECH'.split('').map(c=>S[c].map(x=>x.length?[x[0]+u(0,30)/5,-x[1]]:[])).flat(),
            ]},
        ]
    }
});

if (import.meta.main) await logo.host();